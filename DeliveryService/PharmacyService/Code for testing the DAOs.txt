AppointmentDAO appointmentDAO = new AppointmentDAO();
        AppointmentTypeDAO appointmentTypeDAO = new AppointmentTypeDAO();
        CategoryDAO categoryDAO = new CategoryDAO();
        CustomerDAO customerDAO = new CustomerDAO();
        CustomerOrderDAO customerOrderDAO = new CustomerOrderDAO();
        EmployeeDAO employeeDAO = new EmployeeDAO();
        EmployeeTypeDAO employeeTypeDAO = new EmployeeTypeDAO();
        ExaminationDAO examinationDAO = new ExaminationDAO();
        ExaminationTypeDAO examinationTypeDAO = new ExaminationTypeDAO();
        InventoryDAO inventoryDAO = new InventoryDAO();
        PaymentTypeDAO paymentTypeDAO = new PaymentTypeDAO();
        PrescriptionDAO prescriptionDAO = new PrescriptionDAO();
        RecipeDAO recipeDAO = new RecipeDAO();

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

        Customer daniel = new Customer();
        Customer adam = new Customer();
		daniel.setCustomerId(1);
        daniel.setFirstName("Daniel");
        daniel.setLastName("Andrews");
        daniel.setPhoneNumber("12343234123");
        daniel.setAge(25);
        daniel.setAddress("12 Main Ave");
        customerDAO.createEntity(daniel);
        adam.setCustomerId(2);
        adam.setFirstName("Adam");
        adam.setLastName("Jones");
        adam.setPhoneNumber("5467896543");
        adam.setAge(17);
        adam.setAddress("1234 Easy Street");
        customerDAO.createEntity(adam);
        List<Customer> customers = customerDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + customers);
        LOGGER.log(MENU_LOG, "Testing out id" + customerDAO.getEntityById(2));
		LOGGER.log(MENU_LOG, "Testing out last name" + customerDAO.getCustomerByLastName("Jones"));

        EmployeeType clerk = new EmployeeType();
        EmployeeType doctor = new EmployeeType();
        clerk.setEmployeeTypeId(1);
        clerk.setEmployeeType("Clerk");
        employeeTypeDAO.createEntity(clerk);
        doctor.setEmployeeTypeId(2);
        doctor.setEmployeeType("Doctor");
        employeeTypeDAO.createEntity(doctor);
        List<EmployeeType> employeeTypes = employeeTypeDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + employeeTypes);
        LOGGER.log(MENU_LOG, "Testing out id" + employeeTypeDAO.getEntityById(1));

        AppointmentType vaccine = new AppointmentType();
        AppointmentType recommendation = new AppointmentType();
        vaccine.setAppointmentTypeId(1);
        vaccine.setAppointmentType("Vaccine");
        appointmentTypeDAO.createEntity(vaccine);
        recommendation.setAppointmentTypeId(2);
        recommendation.setAppointmentType("Recommendation");
        appointmentTypeDAO.createEntity(recommendation);
        List<AppointmentType> appointmentTypes = appointmentTypeDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + appointmentTypes);
        LOGGER.log(MENU_LOG, "Testing out id" + appointmentTypeDAO.getEntityById(2));

        ExaminationType covidTest = new ExaminationType();
        ExaminationType measlesTest = new ExaminationType();
        covidTest.setExaminationTypeId(1);
        covidTest.setExaminationType("COVID Test");
        examinationTypeDAO.createEntity(covidTest);
        measlesTest.setExaminationTypeId(2);
        measlesTest.setExaminationType("Measles Test");
        examinationTypeDAO.createEntity(measlesTest);
        List<ExaminationType> examinationTypes = examinationTypeDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + examinationTypes);
        LOGGER.log(MENU_LOG, "Testing out id" + examinationTypeDAO.getEntityById(1));

        PaymentType cash = new PaymentType();
        PaymentType creditCard = new PaymentType();
        cash.setPaymentTypeId(1);
        cash.setPaymentType("Cash");
        paymentTypeDAO.createEntity(cash);
        creditCard.setPaymentTypeId(2);
        creditCard.setPaymentType("Credit Card");
        paymentTypeDAO.createEntity(creditCard);
        List<PaymentType> paymentTypes = paymentTypeDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + paymentTypes);
        LOGGER.log(MENU_LOG, "Testing out id" + paymentTypeDAO.getEntityById(2));

        Category antibiotic = new Category();
        Category ibuprofen = new Category();
        antibiotic.setCategoryId(1);
        antibiotic.setCategoryName("Antibiotic");
        categoryDAO.createEntity(antibiotic);
        ibuprofen.setCategoryId(2);
        ibuprofen.setCategoryName("Ibuprofen");
        categoryDAO.createEntity(ibuprofen);
        List<Category> categories = categoryDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + categories);
        LOGGER.log(MENU_LOG, "Testing out id" + categoryDAO.getEntityById(1));
		LOGGER.log(MENU_LOG, "Testing out name" + categoryDAO.getCategoryByName("Ibuprofen"));

        Inventory advil = new Inventory();
        Inventory amoxil = new Inventory();
        advil.setInventoryId(1);
        advil.setMedicineName("Advil");
        advil.setAmountTaken(2);
        advil.setAmountLeft(100);
        advil.setPriceOfMedicine(8.25);
        advil.setCategoryId(2);
        inventoryDAO.createEntity(advil);
        amoxil.setInventoryId(2);
        amoxil.setMedicineName("Amoxil");
        amoxil.setAmountTaken(1);
        amoxil.setAmountLeft(99);
        amoxil.setPriceOfMedicine(12.99);
        amoxil.setCategoryId(1);
        inventoryDAO.createEntity(amoxil);
        List<Inventory> inventory = inventoryDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + inventory);
        LOGGER.log(MENU_LOG, "Testing out id" + inventoryDAO.getEntityById(2));
		LOGGER.log(MENU_LOG, "Testing out medicine name" + inventoryDAO.getInventoryByMedicineName("Advil"));

        Date dateForDanielOrder = new Date("2022/12/24");
        Date dateForAdamOrder = new Date("2023/1/19");
        CustomerOrder orderForDaniel = new CustomerOrder();
        CustomerOrder orderForAdam = new CustomerOrder();
        orderForDaniel.setCustomerOrderId(1);
        orderForDaniel.setOrderTotal(18.25);
        orderForDaniel.setCustomerId(1);
        orderForDaniel.setOrderDate(dateForDanielOrder);
        orderForDaniel.setPaymentTypeId(1);
        orderForDaniel.setProductId(1);
        customerOrderDAO.createEntity(orderForDaniel);
        orderForAdam.setCustomerOrderId(2);
        orderForDaniel.setOrderTotal(13.57);
        orderForDaniel.setCustomerId(2);
        orderForDaniel.setOrderDate(dateForAdamOrder);
        orderForDaniel.setPaymentTypeId(2);
        orderForDaniel.setProductId(2);
        customerOrderDAO.createEntity(orderForAdam);
        List<CustomerOrder> customerOrders = customerOrderDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + customerOrders);
        LOGGER.log(MENU_LOG, "Testing out id" + customerOrderDAO.getEntityById(1));

        Recipe levofloxacin = new Recipe();
        Recipe genpril = new Recipe();
        levofloxacin.setRecipeId(1);
        levofloxacin.setRecipeSize(20);
        levofloxacin.setMedicineName("Levofloxacin");
        recipeDAO.createEntity(levofloxacin);
        genpril.setRecipeId(2);
        genpril.setRecipeSize(100);
        genpril.setMedicineName("Genpril");
        recipeDAO.createEntity(genpril);
        List<Recipe> recipes = recipeDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + recipes);
        LOGGER.log(MENU_LOG, "Testing out id" + recipeDAO.getEntityById(2));

        Date dateForDanielPrescription = new Date("2022/12/26");
        Date dateForAdamPrescription = new Date("2023/1/20");
        Prescription prescriptionForDaniel = new Prescription();
        Prescription prescriptionForAdam = new Prescription();
        prescriptionForDaniel.setPrescriptionId(1);
        prescriptionForAdam.setRxNumber("1234543");
        prescriptionForAdam.setPriceOfPrescription(25.13);
        prescriptionForAdam.setAmountOfMedicine(50);
        prescriptionForAdam.setDateFilled(dateForDanielPrescription);
        prescriptionForAdam.setCustomerId(1);
        prescriptionForAdam.setInventoryId(1);
        prescriptionForAdam.setRecipeId(1);
        prescriptionDAO.createEntity(prescriptionForDaniel);
        prescriptionForDaniel.setPrescriptionId(2);
        prescriptionForAdam.setRxNumber("12343432");
        prescriptionForAdam.setPriceOfPrescription(30.79);
        prescriptionForAdam.setAmountOfMedicine(100);
        prescriptionForAdam.setDateFilled(dateForAdamPrescription);
        prescriptionForAdam.setCustomerId(2);
        prescriptionForAdam.setInventoryId(2);
        prescriptionForAdam.setRecipeId(2);
        prescriptionDAO.createEntity(prescriptionForAdam);
        List<Prescription> prescriptions = prescriptionDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + prescriptions);
        LOGGER.log(MENU_LOG, "Testing out id" + prescriptionDAO.getEntityById(1));

        Employee michael = new Employee();
        Employee antonio = new Employee();
        michael.setEmployeeTypeId(1);
        michael.setFirstName("Michael");
        michael.setLastName("Morris");
        michael.setEmployeeNumber("123443223");
        michael.setEmployeeTypeId(1);
        employeeDAO.createEntity(michael);
        michael.setEmployeeTypeId(1);
        antonio.setFirstName("Antonio");
        antonio.setLastName("Mayor");
        antonio.setEmployeeNumber("212344553");
        antonio.setEmployeeTypeId(2);
        employeeDAO.createEntity(antonio);
        List<Employee> employees = employeeDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + employees);
        LOGGER.log(MENU_LOG, "Testing out id" + employeeDAO.getEntityById(2));

        Date dateForDanielAppointment = new Date("2022/12/26 13:00:00");
        Date dateForAdamAppointment = new Date("2023/1/17 09:30:00");
        Appointment danielAppointment = new Appointment();
        Appointment adamAppointment = new Appointment();
        danielAppointment.setAppointmentId(1);
        danielAppointment.setDateAndTime(dateForDanielAppointment);
        danielAppointment.setEmployeeId(2);
        danielAppointment.setCustomerId(1);
        danielAppointment.setAppointmentTypeId(1);
        appointmentDAO.createEntity(danielAppointment);
        adamAppointment.setAppointmentId(2);
        adamAppointment.setDateAndTime(dateForAdamAppointment);
        adamAppointment.setEmployeeId(2);
        adamAppointment.setCustomerId(2);
        adamAppointment.setAppointmentTypeId(2);
        appointmentDAO.createEntity(adamAppointment);
        List<Appointment> appointments = appointmentDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + appointments);
        LOGGER.log(MENU_LOG, "Testing out id" + appointmentDAO.getEntityById(1));

        Examination danielExamination = new Examination();
        Examination adamExamination = new Examination();
        danielExamination.setExaminationId(1);
        danielExamination.setExamResult("Negative");
        danielExamination.setEmployeeId(2);
        danielExamination.setExaminationTypeId(1);
        danielExamination.setCustomerId(1);
        examinationDAO.createEntity(danielExamination);
        adamExamination.setExaminationId(2);
        adamExamination.setExamResult("Positive");
        adamExamination.setEmployeeId(2);
        adamExamination.setExaminationTypeId(2);
        adamExamination.setCustomerId(2);
        examinationDAO.createEntity(adamExamination);
        List<Examination> examinations = examinationDAO.getAll();
        LOGGER.log(MENU_LOG, "Testing out get all " + examinations);
        LOGGER.log(MENU_LOG, "Testing out id" + examinationDAO.getEntityById(2));
		
		inventoryDAO.removeEntity(1);
        inventoryDAO.removeEntity(2);
		customerDAO.removeEntity(1);
		customerDAO.removeEntity(2);
		employeeTypeDAO.removeEntity(1);
        employeeTypeDAO.removeEntity(2);
		categoryDAO.removeEntity(1);
        categoryDAO.removeEntity(2);